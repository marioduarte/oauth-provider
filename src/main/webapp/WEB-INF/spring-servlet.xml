<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<context:component-scan base-package="com.ibm.sbt.service"/>
	<mvc:annotation-driven />
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <property name="prefix" value="/WEB-INF/jsp/" />
      <property name="suffix" value=".jsp" />
   	</bean>
   	
   	<mvc:resources mapping="/static/**" location="/WEB-INF/static/" />

	<!--************************************************************************************************************ 
	************************************    OAuth 2.0 Provider Implementation    ***********************************
	*************************************************************************************************************-->

	<context:property-placeholder location="classpath:/oauth-implicit-client.properties" />


	<!--********************* Configuring Client Details ********************-->

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetailsService" />
	</bean>
	
	<!-- The client-details-service element is used to define an in-memory implementation of the client details service.
		 https://github.com/SpringSource/spring-security-oauth/wiki/oAuth2#configuring-client-details
	 -->
	<oauth2:client-details-service id="clientDetailsService">
		<oauth2:client client-id="${appClientId}" authorized-grant-types="implicit" resource-ids="proxy"
			authorities="ROLE_CLIENT" scope="read,write" redirect-uri="${appRedirectUri}" />
	</oauth2:client-details-service>
	
	
	<!--******************** Managing Tokens ********************-->

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetailsService" />
		
		<!-- The default validity (in seconds) of the access token. -->
		<!-- 
		<property name="accessTokenValiditySeconds" value="120"></property> 
		 -->
	</bean>
	
	<!-- switch to JdbcTokenStore -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />
	

	<!--******************** Authorization Server Configuration ********************-->
	
	<bean id="userApprovalHandler" class="com.ibm.sbt.util.UserApprovalHandler">
		<!--  
		<property name="autoApproveClients">
			<set>
				<value>${appClientId}</value>
			</set>
		</property>
		-->
		<property name="tokenServices" ref="tokenServices" />
	</bean>
	
	<!-- Other parameters:
	 user-approval-page: The URL of the page that handles the user approval form.
	 approval-parameter-name: The name of the form parameter that is used to indicate user approval of the client authentication request. 
	 -->
	<oauth2:authorization-server 
		client-details-service-ref="clientDetailsService" 
		token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler"> 
			<oauth2:authorization-code />
			<oauth2:implicit />
			<oauth2:refresh-token />
			<oauth2:client-credentials />
			<oauth2:password />
	</oauth2:authorization-server>


	<!--******************** Resource Server Configuration ********************-->

	<http pattern="/api/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/**" access="ROLE_USER" />
		<custom-filter ref="resourceServerFilter" before="FORM_LOGIN_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<bean id="oauthAuthenticationEntryPoint" 
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />
	
	<bean id="oauthAccessDeniedHandler" 
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<oauth2:resource-server id="resourceServerFilter" resource-id="proxy" token-services-ref="tokenServices" />
	
	
	
	<!--************************************************************************************************************ 
	************************************                  CLIENT                 ***********************************
	*************************************************************************************************************-->

	<http pattern="/proxy/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/proxy/**" access="ROLE_USER" />
		<custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</http>
	
	<oauth2:client id="oauth2ClientFilter" />
	
	
	<!--******************** Protected Resource Configuration ********************-->
	
	<context:property-placeholder location="classpath:/oauth-proxyapp.properties" />
	
	<oauth2:resource id="proxyApp" type="authorization_code" client-id="${clientId}" client-secret="${clientSecret}"
		access-token-uri="${accessTokenUri}" user-authorization-uri="${userAuthorizationUri}" authentication-scheme="form" />
	
	<bean id="proxyService" class="com.ibm.sbt.service.ProxyService">
		<property name="baseUrl" value="${baseUrl}" />
		<property name="proxyAppRestTemplate">
			<oauth2:rest-template resource="proxyApp" access-token-provider="accessTokenProvider" />
		</property>
	</bean>
	
	<bean id="proxyController" class="com.ibm.sbt.service.api.ProxyController">
		<property name="proxyService" ref="proxyService" />
	</bean>
	
	
	<!--******************** Hackery ********************-->
	<bean id="accessTokenProvider" class="com.ibm.sbt.util.smartcloud.SmartCloudAccessTokenProvider" />
	
	
	
	<!--************************************************************************************************************ 
	************************************                 Security                ***********************************
	*************************************************************************************************************-->
	
	<sec:http pattern="/favicon.ico" security="none" />
	
	<sec:http auto-config="true">
		<sec:intercept-url pattern="/**" access="ROLE_USER" />
    </sec:http>
	
	<authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider>
		<user-service id="userDetailsService">
			<user name="mario" password="mario" authorities="ROLE_USER" />
			<user name="paul" password="emu" authorities="ROLE_USER" />
		</user-service>
		</authentication-provider>
	</authentication-manager>
	
	<sec:global-method-security secured-annotations="enabled"/>	
	
</beans>